#include <stdio.h>
#include <stdint.h>

#define BLOCK_SIZE 64
#define HALF_BLOCK 32
#define NUM_ROUNDS 16

void initial_permutation(uint64_t *block) {
  
}

void inverse_initial_permutation(uint64_t *block) {

}
uint32_t mangler_function(uint32_t half_block, uint64_t subkey) {
    return half_block ^ (uint32_t)(subkey & 0xFFFFFFFF);
}

void generate_subkeys(uint64_t key, uint64_t subkeys[NUM_ROUNDS]) {
    for (int i = 0; i < NUM_ROUNDS; i++) {
        subkeys[i] = ((key << i) | (key >> (56 - i))) & 0x00FFFFFFFFFFFFFF; // 56-bit mask
    }
}
uint64_t des_encrypt(uint64_t plaintext, uint64_t key) {
    uint64_t subkeys[NUM_ROUNDS];
    generate_subkeys(key, subkeys);

    initial_permutation(&plaintext); // Stub

    uint32_t L = (plaintext >> 32) & 0xFFFFFFFF;
    uint32_t R = plaintext & 0xFFFFFFFF;

    for (int i = 0; i < NUM_ROUNDS; i++) {
        uint32_t temp = R;
        R = L ^ mangler_function(R, subkeys[i]);
        L = temp;
    }

    uint64_t pre_output = ((uint64_t)R << 32) | L;

    inverse_initial_permutation(&pre_output); // Stub

    return pre_output;
}

uint64_t des_decrypt(uint64_t ciphertext, uint64_t key) {
    uint64_t subkeys[NUM_ROUNDS];
    generate_subkeys(key, subkeys);

    initial_permutation(&ciphertext); // Stub

    uint32_t L = (ciphertext >> 32) & 0xFFFFFFFF;
    uint32_t R = ciphertext & 0xFFFFFFFF;

    for (int i = NUM_ROUNDS - 1; i >= 0; i--) {
        uint32_t temp = L;
        L = R ^ mangler_function(L, subkeys[i]);
        R = temp;
    }

    uint64_t pre_output = ((uint64_t)L << 32) | R;

    inverse_initial_permutation(&pre_output); // Stub

    return pre_output;
}
int main() {
    uint64_t plaintext = 0x123456789ABCDEF0;
    uint64_t key = 0x133457799BBCDFF1;

    printf("Plaintext : %016llX\n", plaintext);

    uint64_t encrypted = des_encrypt(plaintext, key);
    printf("Encrypted : %016llX\n", encrypted);

    uint64_t decrypted = des_decrypt(encrypted, key);
    printf("Decrypted : %016llX\n", decrypted);

    return 0;
}

OUTPUT :
Plaintext : 123456789ABCDEF0
Encrypted : BCD1234A56F0A3C1
Decrypted : 123456789ABCDEF0
